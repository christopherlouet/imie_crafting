<?php

/**
 * Perso controller tests.
 */
namespace IMIE\CraftingBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * PersoControllerTest class.
 * 
 * @author Christopher LOUÃ‹T <christopher.louet@yahoo.com>
 *        
 */
class PersoControllerTest extends WebTestCase {
	
	/**
	 * Test a complete scenario.
	 */
	public function testCompleteScenario() {
		// Create a new client to browse the application
		$client = static::createClient ();
		
		// Create a new entry in the database
		$crawler = $client->request ( 'GET', '/perso/' );
		$this->assertEquals ( 200, $client->getResponse ()->getStatusCode (), "Unexpected HTTP status code for GET /perso/" );
		$crawler = $client->click ( $crawler->selectLink ( 'Create a new entry' )->link () );
		
		$dfHelmet1 = $crawler->filter ( '#imie_craftingbundle_perso_helmet option:contains("DataFixtureHelmet1")' )->attr ( 'value' );
		$dfBoot1 = $crawler->filter ( '#imie_craftingbundle_perso_boot option:contains("DataFixtureBoot1")' )->attr ( 'value' );
		$dfLeg1 = $crawler->filter ( '#imie_craftingbundle_perso_leg option:contains("DataFixtureLeg1")' )->attr ( 'value' );
		$dfGuild1 = $crawler->filter ( '#imie_craftingbundle_perso_guild option:contains("DataFixtureGuild1")' )->attr ( 'value' );
		
		$dfHelmet2 = $crawler->filter ( '#imie_craftingbundle_perso_helmet option:contains("DataFixtureHelmet2")' )->attr ( 'value' );
		$dfBoot2 = $crawler->filter ( '#imie_craftingbundle_perso_boot option:contains("DataFixtureBoot2")' )->attr ( 'value' );
		$dfLeg2 = $crawler->filter ( '#imie_craftingbundle_perso_leg option:contains("DataFixtureLeg2")' )->attr ( 'value' );
		$dfGuild2 = $crawler->filter ( '#imie_craftingbundle_perso_guild option:contains("DataFixtureGuild2")' )->attr ( 'value' );
		
		// Fill in the form and submit it
		$form = $crawler->selectButton ( 'Create' )->form ( array (
				'imie_craftingbundle_perso[name]' => 'TestName',
				'imie_craftingbundle_perso[level]' => 10,
				'imie_craftingbundle_perso[class]' => 'TestClass',
				'imie_craftingbundle_perso[race]' => 'TestRace',
				'imie_craftingbundle_perso[sexe]' => 'TestSexe',
				'imie_craftingbundle_perso[helmet]' => $dfHelmet1,
				'imie_craftingbundle_perso[boot]' => $dfBoot1,
				'imie_craftingbundle_perso[leg]' => $dfLeg1,
				'imie_craftingbundle_perso[guild]' => $dfGuild1 
		) );
		
		$client->submit ( $form );
		$crawler = $client->followRedirect ();
		
		// Check data in the show view
		$this->assertGreaterThan ( 0, $crawler->filter ( 'td:contains("TestName")' )->count (), 'Missing element td:contains("TestName")' );
		$this->assertGreaterThan ( 0, $crawler->filter ( 'td:contains("10")' )->count (), 'Missing element level td:contains("10")' );
		$this->assertGreaterThan ( 0, $crawler->filter ( 'td:contains("TestClass")' )->count (), 'Missing element td:contains("TestClass")' );
		$this->assertGreaterThan ( 0, $crawler->filter ( 'td:contains("TestRace")' )->count (), 'Missing element td:contains("TestRace")' );
		$this->assertGreaterThan ( 0, $crawler->filter ( 'td:contains("TestSexe")' )->count (), 'Missing element td:contains("TestSexe")' );
		
		// Edit the entity
		$crawler = $client->click ( $crawler->selectLink ( 'Edit' )->link () );
		
		$form = $crawler->selectButton ( 'Update' )->form ( array (
				'imie_craftingbundle_perso[name]' => 'FooName',
				'imie_craftingbundle_perso[level]' => 20,
				'imie_craftingbundle_perso[class]' => 'FooClass',
				'imie_craftingbundle_perso[race]' => 'FooRace',
				'imie_craftingbundle_perso[sexe]' => 'FooSexe',
				'imie_craftingbundle_perso[helmet]' => $dfHelmet2,
				'imie_craftingbundle_perso[boot]' => $dfBoot2,
				'imie_craftingbundle_perso[leg]' => $dfLeg2,
				'imie_craftingbundle_perso[guild]' => $dfGuild2 
		) );
		
		$client->submit ( $form );
		$crawler = $client->followRedirect ();
		
		// Check the element contains an attribute with value equals "Foo"
		$this->assertGreaterThan ( 0, $crawler->filter ( '[value="FooName"]' )->count (), 'Missing element [value="FooName"]' );
		$this->assertGreaterThan ( 0, $crawler->filter ( '[value="20"]' )->count (), 'Missing element level [value="20"]' );
		$this->assertGreaterThan ( 0, $crawler->filter ( '[value="FooClass"]' )->count (), 'Missing element [value="FooClass"]' );
		$this->assertGreaterThan ( 0, $crawler->filter ( '[value="FooRace"]' )->count (), 'Missing element [value="FooRace"]' );
		$this->assertGreaterThan ( 0, $crawler->filter ( '[value="FooSexe"]' )->count (), 'Missing element [value="FooSexe"]' );
		
		// Delete the entity
		$client->submit ( $crawler->selectButton ( 'Delete' )->form () );
		$crawler = $client->followRedirect ();
		
		// Check the entity has been delete on the list
		$this->assertNotRegExp ( '/FooName/', $client->getResponse ()->getContent () );
	}
}

